using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using tools;

namespace code_tools.utils
{
    public class YamlUtils
    {
        private static string DEFAULT_YAML_REPLACE="  ";

        private static string DEFAULT_YAML_PATTERN= "^[a-zA-Z0-9]\\S+$";  

        /**
         * yaml文件转json 
         * server:
         *     port: 8090
         */
        public static string toJSONStr(string yamlStr) {
            if (string.IsNullOrEmpty(yamlStr)) { return "{}"; }
            var strArr = yamlStr.Split(new string[] { Environment.NewLine},StringSplitOptions.None);
            var map = new JObject();
            HashSet<string> exsitSet = new HashSet<string>();
            //过滤所有注释
            var allList = strArr.Where(item => !item.Trim().StartsWith("#") && !item.Trim().Equals("")).ToList();
            //分割数组
            for ( var i = 0;i < allList.Count;i++)  {
                var item = allList[i];
                var tt=item.Split(new string[] { ":" }, StringSplitOptions.None);
                var key = tt[0];
                var value = tt[1];
                if (Regex.Match(key, DEFAULT_YAML_PATTERN).Success) {
                    exsitSet.Add(key);
                    //针对头部数据处理
                    if (value == null || value.Equals("")){
                        var childObject = new JObject();
                        findChildByValueObject(childObject, allList, DEFAULT_YAML_REPLACE, exsitSet, key, i);
                        //获取其子类
                        map.Add(key, childObject);
                        continue;
                    }else if (value.StartsWith(" ")){
                        map.Add(key, value.Substring(1));
                        continue;
                    }
                    map.Add(key, value);
                }
                
            }
            return map.ToString();
        }

        /**
         * 
         * 获取子类 
         */
        private static void findChildObject(JObject childObject, List<string> allList, string replaceStr, HashSet<string> exsitSet, string parentKey, int parentIndex)
        {
            var tempCount = 0;
            for (var i = 0; i < allList.Count; i++){
                var item = allList[i];
                var tt = item.Split(new string[] { ":" }, StringSplitOptions.None);
                var key = tt[0];
                var value = tt[1];
                var tmpKey = key.Replace(replaceStr, "");
                var realyKey = parentKey + "." + tmpKey;
                if (i < parentIndex){
                    continue;
                }
                //判断是否是父节点或者已处理过的key
                if (exsitSet.Contains(key) || exsitSet.Contains(realyKey)){
                    continue;
                }
                //判断是否是其他父节点
                var parentSuffix = replaceStr.Length == 2 ? 2 : replaceStr.Length - 2;
                var parentNode = key.Substring(parentSuffix);
                var index = key.LastIndexOf(" ");
                if (Regex.Match(parentNode, DEFAULT_YAML_PATTERN).Success)
                {
                    if (tempCount > 0){
                        break;
                    }
                    tempCount++;
                }else if (index <= parentSuffix) {
                    if (tempCount > 0){
                        break;
                    }
                }   
                //判断如果是父节点或者子节点
                if (!key.StartsWith(replaceStr) || !Regex.Match(tmpKey, DEFAULT_YAML_PATTERN).Success) {
                    continue;
                }
                //判断子节点
                var childReplace = replaceStr + DEFAULT_YAML_REPLACE;
                if (key.StartsWith(childReplace)){
                    continue;
                }
                //找到当前兄弟节点
                if (key.StartsWith(replaceStr) && Regex.Match(tmpKey, DEFAULT_YAML_PATTERN).Success) {
                    // 判断当前节点不是子节点
                    if (!tmpKey.StartsWith(replaceStr)){
                        exsitSet.Add(realyKey);
                        if (value == null || value.Equals("")){
                            var cb = new JObject();
                            findChildObject(cb, allList, childReplace, exsitSet, realyKey, i);
                            //获取其子类
                            childObject.Add(tmpKey, cb);
                            tempCount = 0;
                            continue;
                        }else if (value.StartsWith(" ")){
                            value = value.Substring(1);
                            childObject.Add(tmpKey, value);
                            continue;
                        }
                    }
                    
                }
            }
        }


        private static void findChildByValueObject(JObject childObject, List<string> allList, string replaceStr, HashSet<string> exsitSet, string parentKey, int parentIndex)
        {
            var tempCount = 0;
            for (var i = 0; i < allList.Count; i++) {
                if (i < parentIndex){
                    continue;
                }
                var item = allList[i];
                var tt = item.Split(new string[] { ":" }, StringSplitOptions.None);
                var key = tt[0];
                var value = tt[1];
                var tmpKey = key.Replace(replaceStr, "");
                if (value == null || value.Equals("")){
                    //key是否包含 replaceStr
                    if (replaceStr.Length == (key.LastIndexOf(" ") + 1)) {
                        var cb = new JObject();
                        var childReplace = replaceStr + DEFAULT_YAML_REPLACE;
                        findChildByValueObject(cb, allList, childReplace, exsitSet, tmpKey, i);
                        //获取其子类
                        childObject.Add(tmpKey, cb);
                    } else {
                        if (tempCount > 0){
                            break;
                        }
                        tempCount++;
                    }
                    continue;
                } else if (value.StartsWith(" ")){
                    value = value.Substring(1);
                    childObject.Add(tmpKey, value);
                    continue;
                } else {
                    childObject.Add(tmpKey, "");
                    continue;
                }
            }
        }
    }
}
